% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/SNPbin.R
\docType{class}
\name{SNPbin-class}
\alias{$,SNPbin-method}
\alias{$<-,SNPbin-method}
\alias{NA.posi,SNPbin-method}
\alias{SNPbin}
\alias{SNPbin-class}
\alias{[,SNPbin,ANY,ANY-method}
\alias{[,SNPbin-method}
\alias{as,integer,SNPbin-method}
\alias{as,numeric,SNPbin-method}
\alias{as.integer.SNPbin}
\alias{c.SNPbin}
\alias{cbind.SNPbin}
\alias{coerce,SNPbin,integer-method}
\alias{initialize,SNPbin-method}
\alias{nLoc,SNPbin-method}
\alias{names,SNPbin-method}
\alias{ploidy,SNPbin-method}
\alias{ploidy<-,SNPbin-method}
\alias{show,SNPbin-method}
\title{Formal class "SNPbin"}
\description{
The class \code{SNPbin} is a formal (S4) class for storing a genotype of
binary SNPs in a compact way, using a bit-level coding scheme.  This storage
is most efficient with haploid data, where the memory taken to represent
data can reduced more than 50 times. However, \code{SNPbin} can be used for
any level of ploidy, and still remain an efficient storage mode.
}
\details{
A \code{SNPbin} object can be constructed from a vector of integers giving
the number of the second allele for each locus.

\code{SNPbin} stores a single genotype. To store multiple genotypes, use the
\linkS4class{genlight} class.
}
\section{Objects from the class SNPbin}{
 \code{SNPbin} objects can be created
by calls to \code{new("SNPbin", ...)}, where '...' can be the following
arguments:

\describe{ \item{list("snp")}{a vector of integers or numeric giving numbers
of copies of the second alleles for each locus. If only one unnamed argument
is provided to 'new', it is considered as this one.}
\item{list("ploidy")}{an integer indicating the ploidy of the genotype; if
not provided, will be guessed from the data (as the maximum from the 'snp'
input vector).} \item{list("label")}{an optional character string serving as
a label for the genotype.} }
}
\examples{
\dontrun{
#### HAPLOID EXAMPLE ####
## create a genotype of 100,000 SNPs
dat <- sample(c(0,1,NA), 1e5, prob=c(.495, .495, .01), replace=TRUE)
dat[1:10]
x <- new("SNPbin", dat)
x
x[1:10] # subsetting
as.integer(x[1:10])

## try a few accessors
ploidy(x)
nLoc(x)
head(x$snp[[1]]) # internal bit-level coding

## check that conversion is OK
identical(as(x, "integer"),as.integer(dat)) # SHOULD BE TRUE

## compare the size of the objects
print(object.size(dat), unit="auto")
print(object.size(x), unit="auto")
object.size(dat)/object.size(x) # EFFICIENCY OF CONVERSION


#### TETRAPLOID EXAMPLE ####
## create a genotype of 100,000 SNPs
dat <- sample(c(0:4,NA), 1e5, prob=c(rep(.995/5,5), 0.005), replace=TRUE)
x <- new("SNPbin", dat)
identical(as(x, "integer"),as.integer(dat)) # MUST BE TRUE

## compare the size of the objects
print(object.size(dat), unit="auto")
print(object.size(x), unit="auto")
object.size(dat)/object.size(x) # EFFICIENCY OF CONVERSION


#### c, cbind ####
a <- new("SNPbin", c(1,1,1,1,1))
b <- new("SNPbin", c(0,0,0,0,0))
a
b
ab <- c(a,b)
ab
identical(c(a,b),cbind(a,b))
as.integer(ab)
}
}
\author{
Thibaut Jombart (\email{t.jombart@imperial.ac.uk})
}
\seealso{
Related class:\cr - \code{\linkS4class{genlight}}, for storing
multiple binary SNP genotypes. \cr - \code{\linkS4class{genind}}, for
storing other types of genetic markers. \cr
}
\keyword{classes}

